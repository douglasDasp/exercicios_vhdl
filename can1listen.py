import can

# Registradores simulados: endereço (2 bytes) → valor (4 bytes)
fake_registers = {
    (0x00, 0x01): [0x48, 0x44, 0x54, 0x78], # ID
    (0x00, 0x02): [0xDE, 0xAD, 0xBE, 0xEF], # Serial
    (0x00, 0x03): [0x00, 0x03, 0x01, 0x03], # Sw version
    (0x00, 0x04): [0x00, 0x03, 0x02, 0x02], # Fw version
    (0x00, 0x05): [0x00, 0x03, 0x03, 0x01], # Hw version
    (0x00, 0x06): [0x00, 0x00, 0xff, 0xff], # Uptime
    (0x00, 0x07): [0x00, 0x00, 0x00, 0x00], # Scratchpad
    (0x00, 0x12): [0x00, 0x00, 0x00, 0x00], # CAN0 status
    (0x00, 0x14): [0x00, 0x00, 0x00, 0x00], # CAN1 status
    (0x00, 0x13): [0x00, 0x00, 0x00, 0x00], # CAN0 conf
    (0x00, 0x15): [0x00, 0x00, 0x00, 0x00], # CAN1 conf
    (0x00, 0x30): [0x00, 0x00, 0x00, 0x0f], # status
    (0x00, 0x31): [0x00, 0x00, 0x00, 0x02], # rf status
    (0x00, 0x32): [0x00, 0x64, 0x00, 0x64], # temp0
    (0x00, 0x33): [0x00, 0x00, 0x00, 0x64], # temp1
    (0x00, 0x40): [0x00, 0x64, 0x00, 0x64], # currents0
    (0x00, 0x41): [0x00, 0x65, 0x00, 0x65], # currents1
    (0x00, 0x42): [0x00, 0x66, 0x00, 0x66], # currents2
    (0x00, 0x43): [0x00, 0x67, 0x00, 0x67], # currents3
    (0x00, 0x44): [0x00, 0x68, 0x00, 0x68], # currents4
    (0x00, 0x45): [0x00, 0x69, 0x00, 0x69], # currents5
    (0x00, 0x50): [0x00, 0x64, 0x00, 0x64], # voltages0
    (0x00, 0x51): [0x00, 0x65, 0x00, 0x65], # voltages1
    (0x00, 0x52): [0x00, 0x66, 0x00, 0x66], # voltages2
    (0x00, 0x53): [0x00, 0x67, 0x00, 0x67], # voltages3
    (0x00, 0x54): [0x00, 0x68, 0x00, 0x68], # voltages4
    (0x00, 0x55): [0x00, 0x69, 0x00, 0x69], # voltages5
    (0x00, 0x60): [0x00, 0x00, 0x00, 0x00], # mode
    (0x00, 0x62): [0x00, 0x00, 0x00, 0x01], # all_encodings
    (0x00, 0x63): [0x00, 0x00, 0x00, 0x01], # DataSource
    (0x00, 0x64): [0x00, 0xff, 0x00, 0xff], # symbolrate
    (0x00, 0x65): [0x00, 0x00, 0x00, 0xff], # paconf
    (0x01, 0x30): [0x00, 0x00, 0x02, 0x03], # ch0 freq
    (0x01, 0x40): [0x00, 0x00, 0x02, 0x03], # ch1 freq
    (0x01, 0x60): [0x00, 0x00, 0x02, 0x03], # ch3 freq
    (0x01, 0x70): [0x00, 0x00, 0x02, 0x03], # ch4 freq
    (0x01, 0x31): [0x00, 0x00, 0x02, 0x04], # ch0 enc
    (0x01, 0x41): [0x00, 0x00, 0x02, 0x04], # ch1 enc
    (0x01, 0x61): [0x00, 0x00, 0x02, 0x04], # ch3 enc
    (0x01, 0x71): [0x00, 0x00, 0x02, 0x04], # ch4 enc
    (0x01, 0x90): [0x00, 0x64, 0x00, 0x00], # PA0 STATUS 0
    (0x01, 0x91): [0x00, 0x64, 0x00, 0x00], # PA0 STATUS 1
    (0x01, 0xA0): [0x00, 0x64, 0x00, 0x00], # PA1 STATUS 0
    (0x01, 0xA1): [0x00, 0x64, 0x00, 0x00], # PA1 STATUS 1
    
}

UHDRTX_SOURCE = 0x26
PCAN_DEST = 0x31

def build_response_id(message_type, source, dest):
    return ((message_type & 0x1F) << 24) | (0x00 << 16) | (source << 8) | (dest)

def listen_can(channel='can1', timeout=1.0):
    bus = can.interface.Bus(channel=channel, bustype='socketcan')
    print(f"Listening on {channel}... Press Ctrl+C to stop.")
    try:
        while True:
            msg = bus.recv(timeout)
            if msg is None:
                continue

            arb_id = msg.arbitration_id
            message_type = (arb_id >> 24) & 0x1F
            source = (arb_id >> 5) & 0xFF
            dest = arb_id & 0x1F

            if not msg.is_extended_id:
                continue

            data = list(msg.data)
            if message_type == 0x01 and len(data) == 6:  # Write Request
                reg_addr = tuple(data[0:2])
                reg_value = data[2:6]
                print(f"Write Request: Reg {reg_addr} <= {reg_value}")

                if reg_addr in fake_registers:
                    fake_registers[reg_addr] = reg_value
                    resp_data = list(reg_addr)
                    resp_id = build_response_id(0x02, UHDRTX_SOURCE, source)  # Write Response
                    print(f"Write OK: {reg_addr}")
                else:
                    resp_data = list(reg_addr)
                    resp_id = build_response_id(0x03, UHDRTX_SOURCE, source)  # Write Error
                    print(f"Write ERROR: {reg_addr} not found")

                bus.send(can.Message(arbitration_id=resp_id, data=resp_data, is_extended_id=True))

            elif message_type == 0x04 and len(data) == 2:  # Read Request
                reg_addr = tuple(data[0:2])
                print(f"Read Request: Reg {reg_addr}")
                if reg_addr in fake_registers:
                    value = fake_registers[reg_addr]
                    resp_data = list(reg_addr) + value
                    resp_id = build_response_id(0x05, UHDRTX_SOURCE, source)  # Read Response
                else:
                    resp_data = list(reg_addr)
                    resp_id = build_response_id(0x06, UHDRTX_SOURCE, source)  # Read Error
                    print(f"Read ERROR: {reg_addr} not found")
                bus.send(can.Message(arbitration_id=resp_id, data=resp_data, is_extended_id=True))

            else:
                print(f"Unknown or unhandled msg type {message_type} with ID 0x{arb_id:X}, data: {data}")

    except KeyboardInterrupt:
        print("\nStopped.")

if __name__ == '__main__':
    listen_can()
